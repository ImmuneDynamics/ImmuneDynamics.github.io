Q
Q
is.mito <- grepl("^MT-", colnames(cell.dat@data$RNA))
is.mito <- colnames(cell.dat@data$RNA)[is.mito]
is.mito
qcstats <- perCellQCMetrics(Matrix::t(cell.dat@data$RNA), subsets=list(Mito=is.mito))
library('scater')
library('scran')
is.mito <- grepl("^MT-", colnames(cell.dat@data$RNA))
is.mito <- colnames(cell.dat@data$RNA)[is.mito]
is.mito
qcstats <- perCellQCMetrics(Matrix::t(cell.dat@data$RNA), subsets=list(Mito=is.mito))
qcstats
filtered <- quickPerCellQC(qcstats, percent_subsets="subsets_Mito_percent")
filtered
!filtered$discard # rows for exclusion
cell.dat <- sc.row.filter(cell.dat, !filtered$discard)
cell.dat
cell.dat <- sc.do.lognorm(cell.dat, 'RNA')
cell.dat
dec <- scran::modelGeneVar(Matrix::t(cell.dat@data$RNA_logNorm))
dec
hvg <- scran::getTopHVGs(dec, prop=0.1)
hvg
cell.dat@info$hvg <- hvg
cell.dat@info
cell.dat <- sc.run.pca(cell.dat, 'RNA_logNorm', use.cols = cell.dat@info$hvg)
cell.dat
cell.dat <- sc.run.umap(cell.dat, 'PCA', slot = 'analysis')
cell.dat
setwd("~/OneDrive - The University of Sydney (Staff)/Library/Github (public)/Spectre/")
require(roxygen2)
require(devtools)
document()
library('Spectre')
Spectre::package.check(type = 'spatial')
Spectre::package.load(type = 'spatial')
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
setwd(PrimaryDirectory)
setwd("data/ROIs/")
InputDirectory <- getwd()
InputDirectory
setwd(PrimaryDirectory)
setwd("data/masks")
MaskDirectory <- getwd()
MaskDirectory
library('Spectre')
Spectre::package.check(type = 'spatial')
Spectre::package.load(type = 'spatial')
### Set PrimaryDirectory
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
### Set InputDirectory (ROI TIFFs)
setwd(PrimaryDirectory)
setwd("data/ROIs/")
InputDirectory <- getwd()
InputDirectory
### Set MaskDirectory (ROI mask TIFFs)
setwd(PrimaryDirectory)
setwd("data/masks")
MaskDirectory <- getwd()
MaskDirectory
### Create output directory
setwd(PrimaryDirectory)
dir.create("Output 1 - add masks")
setwd("Output 1 - add masks")
OutputDirectory <- getwd()
OutputDirectory
library('Spectre')
Spectre::package.check(type = 'spatial')
Spectre::package.load(type = 'spatial')
### Set PrimaryDirectory
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
setwd(PrimaryDirectory)
setwd("../data/ROIs/")
InputDirectory <- getwd()
InputDirectory
setwd(PrimaryDirectory)
setwd("../data/masks")
MaskDirectory <- getwd()
MaskDirectory
setwd(PrimaryDirectory)
dir.create("Output 1 - add masks")
setwd("Output 1 - add masks")
OutputDirectory <- getwd()
OutputDirectory
setwd(InputDirectory)
rois <- list.dirs(full.names = FALSE, recursive = FALSE)
as.matrix(rois)
tiff.list <- list()
for(i in rois){
setwd(InputDirectory)
setwd(i)
tiff.list[[i]] <- list.files(getwd())
}
t(as.data.frame(tiff.list))
setwd(InputDirectory)
spatial.dat <- read.spatial.files(dir = InputDirectory)
str(spatial.dat, 3)
spatial.dat[[1]]@RASTERS
setwd(MaskDirectory)
all.masks <- list.files(pattern = '.tif')
as.matrix(all.masks)
mask.types <- list('cell.mask' = 'ROI002_Cell_mask.tiff')
mask.types
for(i in names(mask.types)){
spatial.dat <- do.add.masks(dat = spatial.dat,
mask.dir = MaskDirectory,
mask.pattern = mask.types[[i]],
mask.label = i)
}
mask.types <- list('cell.mask' = '_Cell_mask.tiff')
mask.types
for(i in names(mask.types)){
spatial.dat <- do.add.masks(dat = spatial.dat,
mask.dir = MaskDirectory,
mask.pattern = mask.types[[i]],
mask.label = i)
}
str(spatial.dat, 3)
str(spatial.dat[[1]]@MASKS, 3)
channel.names <- list()
for(i in names(spatial.dat)){
channel.names[[i]] <- names(spatial.dat[[i]]@RASTERS)
}
t(as.data.frame(channel.names))
for(i in names(mask.types)){
spatial.dat <- do.create.outlines(dat = spatial.dat, mask.name = i)
}
str(spatial.dat, 3)
str(spatial.dat[[1]]@MASKS, 2)
setwd(OutputDirectory)
dir.create('Plots - cell masks')
setwd('Plots - cell masks')
as.matrix(names(spatial.dat[[1]]@RASTERS))
base <- 'DNA1_Ir191'
base
as.matrix(names(spatial.dat[[1]]@MASKS))
mask <- 'cell.mask'
mask
for(i in names(spatial.dat)){
make.spatial.plot(dat = spatial.dat,
image.roi = i,
image.channel = base,
mask.outlines = mask)
}
spatial.dat <- do.extract(spatial.dat, 'cell.mask')
str(spatial.dat, 3)
spatial.dat[[1]]@DATA
setwd(OutputDirectory)
dir.create('Plots - factors')
setwd('Plots - factors')
plot.rois <- names(spatial.dat)[c(1:2)]
plot.rois
as.matrix(names(spatial.dat))
plot.rois <- names(spatial.dat)[c(1:2)]
plot.rois
as.matrix(names(spatial.dat[[1]]@RASTERS))
base <- 'DNA1_Ir191'
base
plot.factors <- names(spatial.dat[[1]]@MASKS)[-which('cell.mask' == names(spatial.dat[[1]]@MASKS))]
plot.factors
plot.exp <- names(spatial.dat[[1]]@RASTERS)
plot.exp
for(i in plot.rois){
setwd(OutputDirectory)
setwd('Plots - factors')
dir.create(i)
setwd(i)
for(a in plot.factors){
make.spatial.plot(dat = spatial.dat,
image.roi = i,
image.channel = base,
mask.outlines = mask,
cell.dat = 'CellData',
cell.col = a,
cell.col.type = 'factor',
title = paste0(a, ' - ', i))
}
}
for(i in plot.rois){
setwd(OutputDirectory)
setwd('Plots - factors')
dir.create(i)
setwd(i)
for(a in plot.exp){
make.spatial.plot(dat = spatial.dat,
image.roi = i,
image.channel = base,
mask.outlines = mask,
cell.dat = 'CellData',
cell.col = a,
title = paste0(a, ' - ', i))
}
}
cell.dat <- do.pull.data(spatial.dat, 'CellData')
cell.dat
area.totals <- do.calculate.area(spatial.dat)
area.totals
setwd(OutputDirectory)
dir.create('Data')
setwd('Data')
qsave(spatial.dat, "spatial.dat.qs")
fwrite(cell.dat, 'cell.dat.csv')
fwrite(area.totals, 'area.totals.csv')
cell.dat
cell.dat <- do.pull.data(spatial.dat, 'CellData')
cell.dat
area.totals <- do.calculate.area(spatial.dat)
area.totals
setwd(OutputDirectory)
dir.create('Data')
setwd('Data')
qsave(spatial.dat, "spatial.dat.qs")
fwrite(cell.dat, 'cell.dat.csv')
fwrite(area.totals, 'area.totals.csv')
setwd(OutputDirectory)
dir.create('FCS files')
setwd('FCS files')
for(i in names(spatial.dat)){
## Extract data and setup cols
tmp <- list()
tmp[[i]] <- spatial.dat[[i]]
cell.dat <- do.pull.data(tmp, 'CellData')
cell.dat <- do.asinh(cell.dat, names(spatial.dat[[i]]@RASTERS), cofactor = 1)
### Invert y axis
all.neg <- function(test) -1*abs(test)
y_invert <- cell.dat[['y']]
y_invert <- all.neg(y_invert)
cell.dat[['y_invert']] <- y_invert
### Write FCS files
write.files(cell.dat, i, write.csv = FALSE, write.fcs = TRUE)
rm(cell.dat)
rm(i)
}
library('Spectre')
Spectre::package.check(type = 'spatial')
Spectre::package.load(type = 'spatial')
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
setwd(PrimaryDirectory)
setwd("Output 1 - add masks/Data")
InputDirectory <- getwd()
InputDirectory
setwd(PrimaryDirectory)
setwd("../metadata")
MetaDirectory <- getwd()
MetaDirectory
setwd(PrimaryDirectory)
dir.create("Output 2 - cellular analysis")
setwd("Output 2 - cellular analysis")
OutputDirectory <- getwd()
OutputDirectory
setwd(InputDirectory)
list.files(getwd(), '.qs')
spatial.dat <- qread('spatial.dat.qs')
str(spatial.dat, 3)
cell.dat <- fread('cell.dat.csv')
cell.dat
setwd(MetaDirectory)
sample.meta <- fread("sample.metadata.csv")
sample.meta
sample.meta <- fread("ROIs and samples.csv")
sample.meta
cell.dat <- do.add.cols(cell.dat, base.col = 'ROI', add.dat = sample.meta, add.by = 'ROI')
cell.dat
as.matrix(names(cell.dat))
to.asinh <- names(cell.dat)[c(6:13)]
to.asinh
cell.dat <- do.asinh(cell.dat, to.asinh, cofactor = 1)
cell.dat
cell.dat <- do.rescale(cell.dat, paste0(to.asinh, '_asinh'))
cell.dat
as.matrix(names(cell.dat))
cellular.cols <- names(cell.dat)[c(25:32)]
cellular.cols
as.matrix(names(cell.dat))
cluster.cols <- names(cell.dat)[c(25:32)]
cluster.cols
as.matrix(names(cell.dat))
roi.col <- 'ROI'
sample.col <- 'Sample'
group.col <- 'Group'
batch.col <- 'Batch'
as.matrix(unique(cell.dat$`Annotated cell type`))
summary(cell.dat$Area)
cell.dat
summary(cell.dat$Area)
cell.dat
cell.dat[cell.dat[['Area']] < 10,]
cell.dat
cell.dat[cell.dat[['Area']] < 10,]
cell.dat[cell.dat[['Area']] < 10,] / cell.dat
nrow(cell.dat[cell.dat[['Area']] < 10,]) / nrow(cell.dat)
nrow(cell.dat)
nrow(cell.dat[cell.dat[['Area']] < 10,])
nrow(cell.dat[cell.dat[['Area']] < 10,]) / nrow(cell.dat) * 100
setwd(OutputDirectory)
cell.dat <- run.flowsom(cell.dat, cluster.cols, meta.k = 15)
cell.dat
cell.dat <- run.fitsne(cell.dat, cluster.cols, perplexity = 200)
cell.dat
make.colour.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', roi.col, 'factor')
make.colour.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', sample.col, 'factor')
make.colour.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', group.col, 'factor')
make.colour.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', batch.col, 'factor')
make.colour.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', 'Annotated cell type', 'factor', add.label = TRUE)
make.colour.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', 'FlowSOM_metacluster', 'factor', add.label = TRUE)
make.multi.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', plot.by = cellular.cols, figure.title = 'Cellular cols')
make.multi.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', plot.by = cluster.cols, col.type = 'factor', figure.title = 'Clustering cols')
make.multi.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', 'Annotated cell type', 'ROI', col.type = 'factor', figure.title = 'FlowSOM_metacluster by ROI')
make.multi.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', 'FlowSOM_metacluster', 'ROI', col.type = 'factor', figure.title = 'FlowSOM_metacluster by ROI')
exp <- do.aggregate(cell.dat, cellular.cols, 'FlowSOM_metacluster', 'mean')
make.pheatmap(exp, 'FlowSOM_metacluster', cellular.cols)
rm(exp)
exp <- do.aggregate(cell.dat, cellular.cols, 'FlowSOM_metacluster', 'mean')
make.pheatmap(exp, 'FlowSOM_metacluster', cellular.cols)
rm(exp)
exp <- do.aggregate(cell.dat, cellular.cols, 'FlowSOM_metacluster', 'mean')
make.pheatmap(exp, 'FlowSOM_metacluster', cellular.cols)
rm(exp)
cluster.annots <- list('CD4 T cells' = c(4,14,11,10),
'CD8 T cells' = c(2,15),
'CD11b+ cells' = c(5,9),
'B cells' = c(1,3,6)
)
cluster.annots <- do.list.switch(cluster.annots)
names(cluster.annots) <- c('Values', 'Annotated metacluster')
cluster.annots
cluster.annots <- list('CD4 T cells' = c(4,14,11,10),
'CD8 T cells' = c(2,15),
'CD11b+ cells' = c(5,9),
'B cells' = c(1,3,6)
)
cluster.annots <- do.list.switch(cluster.annots)
names(cluster.annots) <- c('Values', 'Annotated metacluster')
cluster.annots
setorderv(cluster.annots, 'Values')
cluster.annots
cell.dat <- do.add.cols(cell.dat, 'FlowSOM_metacluster', cluster.annots, 'Values')
cell.dat[['Annotated metacluster']][is.na(cell.dat[['Annotated metacluster']])] <- 'Other'
cell.dat
make.colour.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', 'Annotated metacluster', 'factor', add.label = TRUE)
make.multi.plot(cell.dat, 'FItSNE_X', 'FItSNE_Y', 'Annotated metacluster', 'ROI', col.type = 'factor', figure.title = 'Annotated metacluster by ROI')
setwd(OutputDirectory)
dir.create('Data')
setwd('Data')
fwrite(cell.dat, 'cell.dat.csv')
setwd(OutputDirectory)
dir.create('FCS')
setwd('FCS')
write.files(cell.dat, file.prefix = 'IMC_All', write.csv = FALSE, write.fcs = TRUE)
write.files(cell.dat, file.prefix = 'IMC_', divide.by = sample.col, write.csv = FALSE, write.fcs = TRUE)
setwd(OutputDirectory)
dir.create('Annotated clusters')
setwd('Annotated clusters')
for(i in unique(cell.dat$ROI)){
temp <- cell.dat[cell.dat[['ROI']] == i,]
make.spatial.plot(spatial.dat, i, 'DNA1_Ir191', mask.outlines = 'cell.mask', temp, cell.col = 'Annotated metacluster', cell.col.type = 'factor')
}
library('Spectre')
Spectre::package.check(type = 'spatial')
Spectre::package.load(type = 'spatial')
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
setwd(PrimaryDirectory)
setwd("Output 2 - cellular analysis/Data")
InputDirectory <- getwd()
InputDirectory
setwd(PrimaryDirectory)
dir.create("Output 3 - spatial analysis")
setwd("Output 3 - spatial analysis")
OutputDirectory <- getwd()
setwd(InputDirectory)
list.files(getwd(), '.csv')
cell.dat <- fread("cell.dat.csv")
cell.dat
setwd(InputDirectory)
list.files(getwd(), '.qs')
spatial.dat <- qread('../../Output 1 - add masks/Data/spatial.dat.qs')
str(spatial.dat, 3)
setwd(PrimaryDirectory)
setwd('Output 1 - add masks/Data/')
area.totals <- fread('area.totals.csv')
area.totals
setwd(OutputDirectory)
as.matrix(names(cell.dat))
roi.col <- 'ROI'
sample.col <- 'Sample'
group.col <- 'Group'
batch.col <- 'Batch'
pop.col <- 'Annotated metacluster'
as.matrix(unique(cell.dat[[roi.col]]))
as.matrix(unique(cell.dat[[group.col]]))
area.totals
as.matrix(unique(cell.dat[[pop.col]]))
reg.dat <- run.spatial.analysis(dat = cell.dat,
sample.col = roi.col,
pop.col = pop.col,
annot.cols = group.col,
region.col = region.col,
area.table = area.table) ## Also calculate on total by default
area.totals
area.totals
cell.dat$Region <- 'Total'
reg.dat <- run.spatial.analysis(dat = cell.dat,
sample.col = roi.col,
pop.col = pop.col,
annot.cols = group.col,
region.col = region.col,
area.table = area.table) ## Also calculate on total by default
roi.col
pop.col
group.col
region.col
area.totals
cell.dat$Region <- 'Total'
region.col <- 'Total'
reg.dat <- run.spatial.analysis(dat = cell.dat,
sample.col = roi.col,
pop.col = pop.col,
annot.cols = group.col,
region.col = region.col,
area.table = area.table)
region.col
cell.dat
roi.col
pop.col
group.col
area.table
reg.dat <- run.spatial.analysis(dat = cell.dat,
sample.col = roi.col,
pop.col = pop.col,
annot.cols = group.col,
region.col = region.col,
area.table = area.totals)
cell.dat$ROI
pop.col
cell.dat
area.totals
cell.dat$Region <- 'Total'
region.col <- 'Region'
reg.dat <- run.spatial.analysis(dat = cell.dat,
sample.col = roi.col,
pop.col = pop.col,
annot.cols = group.col,
region.col = region.col,
area.table = area.totals)
reg.dat[,c(1:10)]
setwd(OutputDirectory)
fwrite(reg.dat, 'reg.dat.csv')
setwd(OutputDirectory)
as.matrix(names(reg.dat))
as.matrix(names(reg.dat)[c(1:10)])
to.plot <- names(reg.dat)[c(3:ncol(reg.dat))]
to.plot
reg.dat.z <- do.zscore(reg.dat, use.cols = to.plot, replace = TRUE)
reg.dat.z
reg.dat.z <- reg.dat.z[,colSums(is.na(reg.dat.z))<nrow(reg.dat.z), with = FALSE]
reg.dat.z
as.matrix(names(reg.dat.z))
to.plot <- names(reg.dat.z)[c(3:ncol(reg.dat.z))]
as.matrix(names(reg.dat.z))
as.matrix(names(reg.dat.z))
make.pheatmap(reg.dat.z,
sample.col = 'ROI',
plot.cols = to.plot,
annot.cols = group.col,
is.fold = TRUE,
fold.range = c(-3,3),
dendrograms = 'both',
#row.sep = 2,
cutree_rows = 2,
cutree_cols = 3)
setwd(OutputDirectory)
dir.create("Autographs")
setwd("Autographs")
unique(cell.dat$Group)
as.matrix(names(reg.dat))
for(i in names(reg.dat)[c(3:ncol(reg.dat))]){
pop <- sub(".* -- ", "", i) # population
meas <- sub(" -- .*", "", i) # measurement
make.autograph(reg.dat,
x.axis = 'Group',
y.axis = i,
y.axis.label = meas,
grp.order = c('Control', 'Test'),
my_comparisons = list(c('Control', 'Test')),
Pairwise_test = 't.test',
title = pop,
#subtitle = meas
)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/thomasa/OneDrive - The University of Sydney (Staff)/Library/Github (public)/Spectre/workflows/Spatial - simple/Spectre simple spatial/')
